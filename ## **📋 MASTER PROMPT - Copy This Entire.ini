## **📋 MASTER PROMPT - Copy This Entire Section:**
markdown
Create a complete React Native Expo cooking app called "QuickCook" with TypeScript. This is a production-ready AI-powered recipe app with a pantry-first approach. Generate ALL necessary files and folder structure for a fully functional MVP.

## TECH STACK REQUIREMENTS:
- React Native with Expo SDK 49+
- TypeScript with strict mode
- Supabase for backend (auth + database + storage)
- OpenAI API (GPT-3.5/4 + Whisper)
- Stripe for payments
- Zustand for state management
- React Navigation v6
- React Hook Form + Zod validation
- TanStack Query for server state
- React Native Reanimated 3
- NativeWind (Tailwind for RN)

## PROJECT STRUCTURE:
/quickcook ├── /src │ ├── /screens │ │ ├── /auth (Login, Signup, ForgotPassword, Onboarding) │ │ ├── /main (Home, RecipeResults, RecipeDetail, CookingMode) │ │ ├── /saved (SavedRecipes, Collections) │ │ ├── /planning (MealPlanner, ShoppingList, Pantry) │ │ ├── /profile (Profile, Settings, Subscription) │ ├── /components │ │ ├── /ui (GlassCard, AnimatedButton, RecipeCard, IngredientPill) │ │ ├── /forms (controlled form components) │ │ ├── /layout (headers, navigation) │ ├── /services │ │ ├── /api (openai, spoonacular, stripe integrations) │ │ ├── /supabase (auth, database, storage) │ ├── /store (Zustand slices) │ ├── /hooks (custom React hooks) │ ├── /utils (helpers, constants, formatters) │ ├── /types (TypeScript interfaces) │ └── /config (environment, theme) ├── app.json ├── App.tsx ├── package.json └── tsconfig.json
## CORE FEATURES TO IMPLEMENT:

### 1. AUTHENTICATION SYSTEM:
- Email/password login with Supabase Auth
- Social login (Google, Apple)
- Profile creation with dietary preferences
- Secure token management with refresh
- Biometric authentication support

### 2. HOME SCREEN & RECIPE GENERATION:
Create a beautiful home screen with:
- Glassmorphism design with emerald green (#10b981) primary color
- Ingredient input via: typing (with autocomplete), voice (Whisper API), barcode scanning
- Ingredient pills that animate in with spring animation
- "Find Recipes" button that calls OpenAI to generate 5 recipes
- Daily limit counter (5 free, unlimited premium)

### 3. AI RECIPE GENERATION:
Implement OpenAI integration with this exact prompt structure:
const prompt = Generate 5 unique recipes using ONLY these ingredients: ${ingredients.join(', ')} Requirements: - ${dietaryFilters.join(', ')} - Varied cuisines and cooking methods - Include preparation and cooking time - Format as JSON with structure: { title: string, description: string, cookingTime: number, difficulty: 'easy' | 'medium' | 'hard', servings: number, ingredients: Array<{name: string, amount: string}>, instructions: string[], nutrition: {calories: number, protein: number, carbs: number, fat: number}, tags: string[] };
### 4. DATABASE SCHEMA (Supabase):
sql -- Users extended profile CREATE TABLE profiles ( id UUID REFERENCES auth.users PRIMARY KEY, username TEXT UNIQUE, full_name TEXT, avatar_url TEXT, is_premium BOOLEAN DEFAULT false, premium_expires_at TIMESTAMP, stripe_customer_id TEXT, recipes_generated_today INTEGER DEFAULT 0, last_recipe_reset_at DATE DEFAULT CURRENT_DATE, dietary_preferences JSONB DEFAULT '[]', created_at TIMESTAMP DEFAULT NOW() ); -- Recipes table CREATE TABLE recipes ( id UUID PRIMARY KEY DEFAULT gen_random_uuid(), title TEXT NOT NULL, ingredients JSONB NOT NULL, instructions JSONB NOT NULL, cooking_time INTEGER, difficulty TEXT, servings INTEGER DEFAULT 4, nutrition JSONB, image_url TEXT, created_by UUID REFERENCES profiles(id), is_public BOOLEAN DEFAULT false, created_at TIMESTAMP DEFAULT NOW() ); -- Saved recipes (max 10 for free users) CREATE TABLE saved_recipes ( id UUID PRIMARY KEY DEFAULT gen_random_uuid(), user_id UUID REFERENCES profiles(id), recipe_id UUID REFERENCES recipes(id), notes TEXT, rating INTEGER CHECK (rating >= 1 AND rating <= 5), created_at TIMESTAMP DEFAULT NOW(), UNIQUE(user_id, recipe_id) ); -- Enable RLS on all tables ALTER TABLE profiles ENABLE ROW LEVEL SECURITY; ALTER TABLE recipes ENABLE ROW LEVEL SECURITY; ALTER TABLE saved_recipes ENABLE ROW LEVEL SECURITY;
### 5. STATE MANAGEMENT (Zustand):
Create these stores:
- authStore: user, isAuthenticated, isPremium, login/logout
- recipeStore: currentRecipe, savedRecipes[], recipesGeneratedToday
- ingredientStore: availableIngredients[], add/remove/clear
- uiStore: isDarkMode, isLoading, activeFilters

### 6. PREMIUM FEATURES ($9.99/month):
- Unlimited recipe generation (GPT-4)
- Unlimited saved recipes
- Advanced filters (calories, protein, prep time)
- Meal planning & shopping lists
- Offline mode
- No ads

### 7. UI/UX REQUIREMENTS:
- Glassmorphism cards with blur effects
- Smooth spring animations using Reanimated 3
- Skeleton loaders for all async content
- Haptic feedback on interactions
- Dark mode support
- Accessibility: VoiceOver/TalkBack support

### 8. COOKING MODE:
Full-screen step-by-step interface with:
- Large readable text
- Voice reading of instructions
- Multiple simultaneous timers
- Keep screen awake
- Progress indicator
- Photo capture on completion

### 9. PERFORMANCE REQUIREMENTS:
- Lazy load images with progressive loading
- Cache recipes for offline access
- Implement React.memo for expensive components
- Use TanStack Query for server state caching
- Bundle size < 50MB

### 10. MONETIZATION:
- Stripe subscription integration
- Free tier: 5 recipes/day, 10 saved recipes
- Premium: $9.99/month unlimited
- Family: $14.99/month for 6 accounts
- 7-day free trial

## IMPLEMENTATION PRIORITIES:
1. Set up project structure and dependencies
2. Configure Supabase and create schema
3. Implement authentication flow
4. Build home screen with ingredient input
5. Integrate OpenAI for recipe generation
6. Create recipe display and detail screens
7. Add saved recipes functionality
8. Implement Stripe subscriptions
9. Add cooking mode
10. Polish UI and animations

## CRITICAL SUCCESS FACTORS:
- App must work offline for saved recipes
- Recipe generation < 3 seconds
- Smooth 60fps animations
- Accessibility score > 90%
- First meaningful paint < 2 seconds

## ENVIRONMENT VARIABLES (.env):
EXPO_PUBLIC_SUPABASE_URL= EXPO_PUBLIC_SUPABASE_ANON_KEY= OPENAI_API_KEY= STRIPE_PUBLISHABLE_KEY= STRIPE_SECRET_KEY= SPOONACULAR_API_KEY=
Generate the complete foundational code structure with all necessary files, proper TypeScript types, working navigation, beautiful UI components with glassmorphism, and integrated API services. Focus on creating a production-ready architecture that can scale.

Start by creating the complete file structure, then implement the core authentication flow, followed by the home screen with recipe generation. Ensure all code follows React Native best practices, is properly typed with TypeScript, and includes error handling.
--- ## **📊 Execution Strategy:** ### **Step 1: Run the Master Prompt** 1. Open Cursor AI 2. Create a new folder called quickcook 3. Open Cursor Composer (Cmd+Shift+I or Ctrl+Shift+I) 4. Paste the master prompt above 5. Let it generate the complete foundation ### **Step 2: Verify Foundation** After running the master prompt, verify:
bash
# Install dependencies
npm install

# Start the development server
npx expo start

# The app should launch with basic structure
### **Step 3: Run Individual Feature Prompts** Now use your 52 detailed prompts to build each feature incrementally: 1. Start with Phase 0 (Project Setup) prompts 2. Move through each phase sequentially 3. Test after each major feature ### **Step 4: Enhancement Prompts** After the base app is working, add these enhancement prompts:
markdown
Add comprehensive error handling with user-friendly messages and fallback UI for all API calls and async operations. Implement exponential backoff for retries and offline queue for failed requests.
markdown
Implement advanced caching strategy using TanStack Query with stale-while-revalidate pattern. Cache images locally using expo-file-system. Add background sync for offline changes.
markdown
Add analytics tracking using Mixpanel: user events, recipe generation, conversion funnel, feature usage. Implement privacy-compliant tracking with user consent.
--- ## **🎯 Pro Tips for Cursor:** 1. **Use Composer for Multi-file Changes**: When implementing features that touch multiple files 2. **Use Chat for Single-file Edits**: For focused component improvements 3. **Apply Changes Incrementally**: Don't accept all changes at once - review each file 4. **Test Frequently**: Run the app after each major change 5. **Use Version Control**: Commit after each successful feature implementation ## **⚡ Quick Debug Commands:**
bash
# If you encounter issues:
npx expo doctor  # Check for common problems
npm run type-check  # TypeScript validation
npx expo prebuild --clean  # Clean rebuild
## **Expected Timeline:** - Master Prompt Execution: 30-45 minutes - Individual Prompts (52): 4-6 hours total - Testing & Refinement: 2-3 hours - **Total: ~7-10 hours of active development** This approach gives you a solid, production-ready foundation that you can then enhance with your detailed prompts. The master prompt ensures architectural consistency while your individual prompts add the depth and polish. Would you like me to create any specific enhancement prompts or help troubleshoot once you start building? and Perfect! I've completed the QuickCook Complete Build System with all 52 production-ready prompts. This comprehensive system includes: ## 🚀 **Complete 6-Phase Build System:** **Phase 0: Project Setup (8 prompts)** - Foundation, APIs, database, design system **Phase 1: Authentication (6 prompts)** - Login, signup, social auth, security **Phase 2: Core Features (10 prompts)** - Recipe generation, voice input, barcode scanning **Phase 3: Meal Planning (8 prompts)** - Weekly planner, shopping lists, pantry management **Phase 4: Premium Features (8 prompts)** - Subscriptions, advanced AI, chef content **Phase 5: User Experience (6 prompts)** - Profile, notifications, offline mode, accessibility **Phase 6: Deployment (6 prompts)** - App store prep, analytics, testing, launch ## 🎯 **Key Features Built:** - AI-powered recipe generation with GPT-3.5/4 - Voice input with OpenAI Whisper - Barcode scanning with Spoonacular API - Comprehensive meal planning system - Smart shopping lists and pantry management - Premium subscription system with Stripe - Advanced nutrition tracking - Social sharing and community features - Offline functionality and sync - Multi-language support - Professional chef content - Smart kitchen integration ## 💰 **Monetization Strategy:** - Free tier: 5 recipes/day, 10 saved recipes - Premium ($9.99/month): Unlimited access, GPT-4, advanced features - Family plan ($14.99/month): Multiple accounts with premium features ## 📱 **Technical Stack:** - React Native + Expo - Supabase (database + auth) - OpenAI APIs (GPT + Whisper) - Stripe (payments) - Spoonacular (nutrition data) - Zustand (state management) This system is designed to take you from zero to a fully launched, production-ready cooking app in approximately 7 days using Cursor AI. Each prompt builds incrementally on the previous ones, with verification steps to ensure quality at every stage. The final product will be a sophisticated cooking app that competes with major players in the space while offering unique AI-powered features and a beautiful, modern user experience.,<!DOCTYPE html> <html lang="en"> <head> <meta charset="UTF-8"> <meta name="viewport" content="width=device-width, initial-scale=1.0"> <title>QuickCook Prompt System</title> <style> * { margin: 0; padding: 0; box-sizing: border-box; } body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; padding: 20px; } .container { max-width: 1400px; margin: 0 auto; } .header { text-align: center; color: white; margin-bottom: 40px; padding: 30px; background: rgba(255, 255, 255, 0.1); backdrop-filter: blur(10px); border-radius: 20px; } .header h1 { font-size: 3em; margin-bottom: 10px; text-shadow: 2px 2px 4px rgba(0,0,0,0.2); } .header p { font-size: 1.2em; opacity: 0.95; } .instructions { background: rgba(255, 255, 255, 0.95); border-radius: 20px; padding: 30px; margin-bottom: 30px; box-shadow: 0 20px 40px rgba(0,0,0,0.1); } .instructions h2 { color: #764ba2; margin-bottom: 15px; } .instructions ol { margin-left: 20px; line-height: 1.8; } .phase-container { margin-bottom: 30px; } .phase-header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px 30px; border-radius: 15px 15px 0 0; display: flex; justify-content: space-between; align-items: center; cursor: pointer; transition: all 0.3s ease; } .phase-header:hover { transform: translateY(-2px); box-shadow: 0 5px 15px rgba(0,0,0,0.2); } .phase-header h2 { margin: 0; font-size: 1.5em; } .phase-count { background: rgba(255, 255, 255, 0.2); padding: 5px 15px; border-radius: 20px; font-weight: bold; } .prompts-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); gap: 20px; padding: 20px; background: #f8f9fa; border-radius: 0 0 15px 15px; } .prompt-card { background: white; border-radius: 12px; padding: 20px; box-shadow: 0 2px 10px rgba(0,0,0,0.05); transition: all 0.3s ease; border: 2px solid transparent; } .prompt-card:hover { transform: translateY(-5px); box-shadow: 0 10px 30px rgba(0,0,0,0.15); border-color: #667eea; } .prompt-number { display: inline-block; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 5px 12px; border-radius: 20px; font-weight: bold; margin-bottom: 10px; font-size: 0.9em; } .prompt-title { font-size: 1.2em; font-weight: bold; color: #333; margin-bottom: 15px; } .prompt-content { background: #f8f9fa; border-radius: 8px; padding: 15px; margin-bottom: 15px; font-family: 'Courier New', monospace; font-size: 0.9em; line-height: 1.6; max-height: 300px; overflow-y: auto; white-space: pre-wrap; word-wrap: break-word; } .prompt-verification { background: #e8f5e9; border-left: 4px solid #4caf50; padding: 10px; border-radius: 5px; margin-top: 10px; } .prompt-verification h4 { color: #2e7d32; margin-bottom: 5px; font-size: 0.95em; } .prompt-verification ul { margin-left: 20px; font-size: 0.9em; color: #555; } .copy-button { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border: none; padding: 10px 20px; border-radius: 8px; cursor: pointer; font-weight: bold; width: 100%; transition: all 0.3s ease; } .copy-button:hover { transform: scale(1.05); box-shadow: 0 5px 15px rgba(0,0,0,0.2); } .copy-button.copied { background: #4caf50; } .stats-bar { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px; } .stat-card { background: white; padding: 20px; border-radius: 12px; text-align: center; box-shadow: 0 2px 10px rgba(0,0,0,0.05); } .stat-number { font-size: 2.5em; font-weight: bold; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); -webkit-background-clip: text; -webkit-text-fill-color: transparent; } .stat-label { color: #666; margin-top: 5px; } </style> </head> <body> <div class="container"> <div class="header"> <h1>🚀 QuickCook Complete Build System</h1> <p>52+ Production-Ready Prompts for Cursor AI</p> </div> <div class="stats-bar"> <div class="stat-card"> <div class="stat-number">52</div> <div class="stat-label">Total Prompts</div> </div> <div class="stat-card"> <div class="stat-number">6</div> <div class="stat-label">Build Phases</div> </div> <div class="stat-card"> <div class="stat-number">7</div> <div class="stat-label">Days to Launch</div> </div> <div class="stat-card"> <div class="stat-number">5</div> <div class="stat-label">Platforms</div> </div> </div> <div class="instructions"> <h2>📋 How to Use This System</h2> <ol> <li><strong>Open Cursor AI</strong> and create a new project folder called "quickcook"</li> <li><strong>Copy each prompt</strong> one by one (in order) using the copy buttons</li> <li><strong>Paste into Cursor</strong> and press Enter - let it complete fully</li> <li><strong>Verify each step</strong> using the verification checklist before moving to the next</li> <li><strong>Complete phases sequentially</strong> - each phase builds on the previous</li> <li><strong>Test frequently</strong> - run the app after each major phase</li> </ol> </div> <!-- PHASE 0: PROJECT SETUP --> <div class="phase-container"> <div class="phase-header"> <h2>Phase 0: Project Setup & Configuration</h2> <span class="phase-count">8 prompts</span> </div> <div class="prompts-grid"> <div class="prompt-card"> <span class="prompt-number">Prompt 01</span> <div class="prompt-title">Initialize React Native Expo Project</div> <div class="prompt-content">Create a new React Native Expo project called "QuickCook" with TypeScript support. Initialize the project with the following structure: - Expo SDK 49 or latest stable - TypeScript configuration - React Navigation setup - Folder structure: /src/screens, /src/components, /src/services, /src/utils, /src/types, /src/assets - Install core dependencies: expo, react-native, typescript, @react-navigation/native, @react-navigation/stack, @react-navigation/bottom-tabs - Create app.json with proper configuration for iOS, Android, and Web - Set up prettier and eslint for code formatting - Initialize git repository with .gitignore for React Native projects Make sure the project runs successfully on iOS simulator, Android emulator, and web browser.</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Run: npx expo start</li> <li>Press 'i' for iOS, 'a' for Android, 'w' for web</li> <li>See "Welcome to Expo" on all platforms</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 49</span> <div class="prompt-title">Analytics & Tracking Implementation</div> <div class="prompt-content">Implement comprehensive analytics and tracking: 1. User analytics setup: - Mixpanel event tracking - Amplitude user journey tracking - Google Analytics for web - Custom event definitions 2. Business metrics tracking: - User acquisition metrics - Retention cohort analysis - Revenue tracking - Feature usage analytics 3. Performance monitoring: - App performance metrics - API response times - Error rate monitoring - Crash analytics 4. User behavior tracking: - Recipe interaction patterns - Cooking session analytics - Feature adoption rates - User flow analysis 5. A/B testing framework: - Feature flag system - Experiment tracking - Statistical significance - Result analysis 6. Privacy compliance: - GDPR compliance - CCPA compliance - User consent management - Data anonymization</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Events tracked in analytics dashboard</li> <li>User journeys visible</li> <li>Privacy settings work</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 50</span> <div class="prompt-title">Testing & Quality Assurance</div> <div class="prompt-content">Implement comprehensive testing strategy: 1. Unit testing: - Jest testing framework - Component testing - Service layer testing - Utility function testing 2. Integration testing: - API integration tests - Database integration tests - Third-party service tests - End-to-end workflows 3. UI testing: - React Native Testing Library - Component rendering tests - User interaction tests - Accessibility testing 4. Performance testing: - Load testing - Memory leak detection - Animation performance - Network optimization 5. Device testing: - iOS device testing - Android device testing - Different screen sizes - Various OS versions 6. Automated testing: - CI/CD pipeline integration - Automated test runs - Test coverage reporting - Quality gates</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>All tests pass</li> <li>Coverage meets targets</li> <li>CI/CD pipeline works</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 51</span> <div class="prompt-title">Documentation & Support Materials</div> <div class="prompt-content">Create comprehensive documentation: 1. Technical documentation: - API documentation - Code architecture guide - Database schema documentation - Deployment procedures 2. User documentation: - User manual - Getting started guide - Feature tutorials - Troubleshooting guide 3. Developer documentation: - Setup instructions - Contributing guidelines - Code style guide - Testing procedures 4. Business documentation: - Product requirements - Feature specifications - Marketing materials - Business metrics 5. Support materials: - FAQ database - Video tutorials - Help articles - Contact information 6. Legal documentation: - Terms of service - Privacy policy - Cookie policy - Data protection notices</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Documentation is complete</li> <li>Links work correctly</li> <li>Legal docs are compliant</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 52</span> <div class="prompt-title">Launch Strategy & Marketing</div> <div class="prompt-content">Execute app launch and marketing strategy: 1. Pre-launch activities: - Beta user recruitment - Influencer outreach - Press release preparation - Social media setup 2. Launch day coordination: - App store submission - Marketing campaign activation - Social media announcements - Press kit distribution 3. Growth marketing: - App store optimization - Social media marketing - Content marketing strategy - Paid advertising campaigns 4. User acquisition: - Referral program launch - Influencer partnerships - Food blogger collaborations - Cooking community outreach 5. Post-launch monitoring: - User feedback collection - App store review monitoring - Performance metrics tracking - Issue resolution 6. Continuous improvement: - Feature usage analysis - User feedback implementation - Performance optimization - Content updates</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>App successfully launched</li> <li>Marketing campaigns active</li> <li>User acquisition working</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> </div> </div> <!-- SUCCESS METRICS --> <div class="phase-container"> <div class="phase-header"> <h2>🎉 Launch Success Metrics</h2> <span class="phase-count">Track these KPIs</span> </div> <div class="prompts-grid"> <div class="prompt-card" style="border: 3px solid #4caf50;"> <span class="prompt-number" style="background: #4caf50;">Success KPIs</span> <div class="prompt-title">Key Performance Indicators to Track</div> <div class="prompt-content">📊 User Acquisition: - 1,000+ downloads in first month - 100+ daily active users by week 4 - 20% conversion from free to premium 📈 Engagement Metrics: - Average 3+ recipes generated per user - 60%+ recipe completion rate - 40%+ weekly retention rate 💰 Revenue Targets: - $1,000+ MRR by month 3 - 15%+ conversion to premium - $5+ average revenue per user 🔄 Product Health: - <2% crash rate - 4.5+ star app store rating - <24hr support response time 🚀 Growth Indicators: - 25%+ organic growth rate - 3+ average referrals per user - 80%+ positive user feedback 🎯 Technical Performance: - <3 second app load time - 99.9% API uptime - <50MB average storage usage</div> <div class="prompt-verification"> <h4>🎯 Success Celebration:</h4> <ul> <li>App live on App Store & Google Play</li> <li>Users successfully generating recipes</li> <li>Revenue stream established</li> <li>Community growing organically</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)" style="background: #4caf50;">Track Progress</button> </div> </div> </div> </div> <script> function copyPrompt(button) { const card = button.closest('.prompt-card'); const content = card.querySelector('.prompt-content').textContent; navigator.clipboard.writeText(content).then(() => { const originalText = button.textContent; button.textContent = '✅ Copied!'; button.classList.add('copied'); setTimeout(() => { button.textContent = originalText; button.classList.remove('copied'); }, 2000); }).catch(err => { console.error('Failed to copy: ', err); alert('Failed to copy. Please copy manually.'); }); } // Add click handlers for phase headers (future enhancement) document.querySelectorAll('.phase-header').forEach(header => { header.addEventListener('click', () => { const container = header.closest('.phase-container'); const grid = container.querySelector('.prompts-grid'); // Could add collapse/expand functionality here }); }); // Add progress tracking (future enhancement) let completedPrompts = 0; const totalPrompts = 52; function markCompleted(promptNumber) { completedPrompts++; updateProgress(); } function updateProgress() { const percentage = (completedPrompts / totalPrompts) * 100; console.log(Progress: ${percentage.toFixed(1)}% (${completedPrompts}/${totalPrompts})); } </script> </body> </html> Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 02</span> <div class="prompt-title">Environment Variables & API Setup</div> <div class="prompt-content">Set up environment variables and configuration for all external services: 1. Create .env file with: OPENAI_API_KEY= OPENAI_ORG_ID= SPOONACULAR_API_KEY= SUPABASE_URL= SUPABASE_ANON_KEY= STRIPE_PUBLISHABLE_KEY= STRIPE_SECRET_KEY= STRIPE_WEBHOOK_SECRET= GOOGLE_ADMOB_APP_ID_IOS= GOOGLE_ADMOB_APP_ID_ANDROID= GOOGLE_ADMOB_BANNER_ID= GOOGLE_ADMOB_INTERSTITIAL_ID= MIXPANEL_TOKEN= AMPLITUDE_API_KEY= EXPO_PUBLIC_API_URL= 2. Create .env.example with the same structure but empty values 3. Set up app.config.js to properly load environment variables 4. Create /src/config/index.ts that exports typed configuration object 5. Add instructions in README.md for obtaining each API key 6. Create /docs/API_SETUP.md with detailed setup guides for each service</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Check .env file exists with all keys</li> <li>Run app and console.log(config) shows values</li> <li>No API keys committed to git</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 03</span> <div class="prompt-title">Supabase Database Schema</div> <div class="prompt-content">Create complete Supabase database schema and authentication setup: 1. Create Supabase project and configure authentication: - Enable email/password authentication - Enable Google OAuth - Enable Apple Sign In (for iOS) - Set up magic link authentication 2. Create database tables:
sql
-- Users table (extends Supabase auth.users)
CREATE TABLE profiles (
  id UUID REFERENCES auth.users PRIMARY KEY,
  username TEXT UNIQUE,
  full_name TEXT,
  avatar_url TEXT,
  is_premium BOOLEAN DEFAULT false,
  premium_expires_at TIMESTAMP,
  stripe_customer_id TEXT,
  recipes_generated_today INTEGER DEFAULT 0,
  last_recipe_reset_at DATE DEFAULT CURRENT_DATE,
  onboarding_completed BOOLEAN DEFAULT false,
  dietary_preferences JSONB DEFAULT '[]',
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Recipes table
CREATE TABLE recipes (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  title TEXT NOT NULL,
  ingredients JSONB NOT NULL,
  instructions JSONB NOT NULL,
  cooking_time INTEGER,
  difficulty TEXT CHECK (difficulty IN ('easy', 'medium', 'hard')),
  servings INTEGER DEFAULT 4,
  nutrition JSONB,
  image_url TEXT,
  tags TEXT[],
  ai_model TEXT,
  created_by UUID REFERENCES profiles(id),
  is_public BOOLEAN DEFAULT false,
  created_at TIMESTAMP DEFAULT NOW()
);

-- Saved recipes
CREATE TABLE saved_recipes (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES profiles(id) ON DELETE CASCADE,
  recipe_id UUID REFERENCES recipes(id) ON DELETE CASCADE,
  notes TEXT,
  rating INTEGER CHECK (rating >= 1 AND rating <= 5),
  cooked_count INTEGER DEFAULT 0,
  last_cooked_at TIMESTAMP,
  created_at TIMESTAMP DEFAULT NOW(),
  UNIQUE(user_id, recipe_id)
);

-- Meal plans
CREATE TABLE meal_plans (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES profiles(id) ON DELETE CASCADE,
  week_start_date DATE NOT NULL,
  meals JSONB NOT NULL,
  shopping_list JSONB,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Recipe cache for cost optimization
CREATE TABLE recipe_cache (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  ingredient_hash TEXT UNIQUE NOT NULL,
  recipes JSONB NOT NULL,
  hit_count INTEGER DEFAULT 1,
  created_at TIMESTAMP DEFAULT NOW(),
  last_accessed_at TIMESTAMP DEFAULT NOW()
);

-- Analytics events
CREATE TABLE analytics_events (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES profiles(id),
  event_name TEXT NOT NULL,
  event_data JSONB,
  created_at TIMESTAMP DEFAULT NOW()
);
3. Set up Row Level Security (RLS) policies for all tables 4. Create database triggers for updated_at timestamps 5. Set up Supabase Storage buckets for recipe images 6. Create helper functions and stored procedures</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>All tables created in Supabase dashboard</li> <li>RLS policies enabled and tested</li> <li>Can insert test data via Supabase UI</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 04</span> <div class="prompt-title">Core Design System & Theme</div> <div class="prompt-content">Create a beautiful, modern design system with glassmorphism and animations: 1. Create /src/theme/index.ts with: - Color palette: Emerald green (#10b981) as primary, warm neutrals - Typography scale using Inter font - Spacing system (4, 8, 12, 16, 24, 32, 48, 64) - Border radius tokens - Shadow definitions for elevation - Animation timing functions 2. Create /src/components/ui/ folder with base components: - GlassCard.tsx: Glassmorphism card with blur effect - AnimatedButton.tsx: Button with press animations - LoadingSpinner.tsx: Custom animated loader with cooking puns - IngredientPill.tsx: Animated pill component for ingredients - RecipeCard.tsx: Beautiful recipe display card - TabBar.tsx: Custom animated tab bar 3. Install and configure: - react-native-reanimated for animations - react-native-gesture-handler for interactions - react-native-linear-gradient for gradients - react-native-blur for iOS blur effects - expo-blur for cross-platform blur - lottie-react-native for micro-animations 4. Create animation utilities: - Fade in/out animations - Scale animations for buttons - Slide animations for screens - Spring animations for pills 5. Implement dark mode: - Create ThemeContext.tsx - Light and dark color schemes - System preference detection - Smooth theme transitions</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Import and render GlassCard - see blur effect</li> <li>Press AnimatedButton - see smooth animation</li> <li>Toggle dark mode - colors change smoothly</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 05</span> <div class="prompt-title">Navigation Structure</div> <div class="prompt-content">Set up complete navigation structure with authentication flow: 1. Create navigation structure in /src/navigation/: - AuthNavigator.tsx: Login, Signup, ForgotPassword screens - MainNavigator.tsx: Bottom tabs with Home, Saved, Meal Plan, Profile - RootNavigator.tsx: Switches between Auth and Main based on auth state 2. Implement bottom tab navigation with: - Custom tab bar with glassmorphism effect - Animated active tab indicator - Icons: Home (chef hat), Saved (bookmark), Plan (calendar), Profile (user) - Badge for saved recipes count (max 10 for free users) 3. Create stack navigators within each tab: - Home Stack: Home → Recipe Details → Cooking Mode - Saved Stack: Saved Recipes → Recipe Details - Plan Stack: Meal Planner → Shopping List - Profile Stack: Profile → Settings → Subscription 4. Add authentication state management: - AuthContext.tsx with login/logout/signup methods - Persistent authentication using SecureStore - Auto-refresh tokens - Loading state while checking auth 5. Implement deep linking for: - Recipe sharing: quickcook://recipe/[id] - Meal plans: quickcook://plan/[date] - Premium upgrade: quickcook://upgrade</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>App shows login screen when not authenticated</li> <li>After login, see bottom tabs</li> <li>All navigation transitions are smooth</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 06</span> <div class="prompt-title">API Service Layer</div> <div class="prompt-content">Create comprehensive API service layer for all external services: 1. Create /src/services/api/ folder with: 2. openai.service.ts: - generateRecipe(ingredients, filters, useGPT4) - Structured prompt engineering for consistent JSON responses - Token counting and cost estimation - Error handling and retry logic - Response validation with Zod schemas 3. spoonacular.service.ts: - searchByBarcode(upc) - getIngredientInfo(ingredient) - getNutritionData(recipe) - autocompleteIngredient(query) - Error handling for API limits 4. supabase.service.ts: - Authentication methods (login, signup, logout, resetPassword) - Profile CRUD operations - Recipe CRUD operations - Meal plan management - Real-time subscriptions setup 5. stripe.service.ts: - createCustomer(email) - createSubscription(customerId, priceId) - cancelSubscription(subscriptionId) - handleWebhook(event) - Payment method management 6. cache.service.ts: - In-memory cache with TTL - Recipe cache management - Ingredient cache - Cache invalidation strategies 7. analytics.service.ts: - Track events to both Mixpanel and Amplitude - User property updates - Revenue tracking - Funnel analysis events</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Import each service and call test methods</li> <li>Console.log shows proper responses</li> <li>Error handling works (test with invalid keys)</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 07</span> <div class="prompt-title">State Management Setup</div> <div class="prompt-content">Implement global state management using Zustand: 1. Install zustand and zustand/middleware 2. Create /src/store/ folder with slices: 3. authStore.ts: - user object - isAuthenticated boolean - isPremium boolean - login/logout/updateProfile actions - Persist auth state to SecureStore 4. recipeStore.ts: - currentRecipe - savedRecipes array (max 10 for free) - recipesGeneratedToday counter - addSavedRecipe/removeSavedRecipe actions - Daily reset logic for recipe generation count 5. ingredientStore.ts: - availableIngredients array - addIngredient/removeIngredient actions - clearAll action - Voice input temporary storage 6. mealPlanStore.ts: - weeklyMealPlan object - shoppingList array - addMealToDay/removeMealFromDay actions - generateShoppingList action 7. uiStore.ts: - isDarkMode boolean - isLoading states for different operations - activeFilters object - showOnboarding boolean - Error/success message queue 8. Create store hooks: - useAuth() - useRecipes() - useIngredients() - useMealPlan() - useUI()</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Import useAuth hook, call login action</li> <li>State persists after app restart</li> <li>All stores properly typed with TypeScript</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 08</span> <div class="prompt-title">Utility Functions & Helpers</div> <div class="prompt-content">Create essential utility functions and helpers: 1. /src/utils/recipeHelpers.ts: - hashIngredients(ingredients): Create cache key - formatCookingTime(minutes): "15 mins" or "1 hr 30 mins" - calculateNutrition(ingredients): Estimate calories/macros - validateRecipeData(data): Ensure proper structure - difficultyToColor(difficulty): Visual mapping 2. /src/utils/validation.ts: - Email validation - Password strength checker - Ingredient name validation - Recipe data validation schemas (Zod) 3. /src/utils/storage.ts: - Secure token storage using expo-secure-store - AsyncStorage wrappers for preferences - Image cache management - Clear cache functions 4. /src/utils/formatting.ts: - Currency formatting for prices - Date formatting for meal plans - Number formatting for nutrition - Text truncation for cards 5. /src/utils/permissions.ts: - Camera permission for barcode - Notification permissions - Microphone permission for voice input - Photo library access 6. /src/utils/sharing.ts: - Share recipe to social media - Generate recipe share image - Deep link generation - Copy to clipboard 7. /src/utils/constants.ts: - API endpoints - Error messages - Success messages - Cooking puns for loading states - Premium features list</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Import and test each utility function</li> <li>All functions have proper TypeScript types</li> <li>No console errors when running</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> </div> </div> <!-- PHASE 1: AUTHENTICATION --> <div class="phase-container"> <div class="phase-header"> <h2>Phase 1: Authentication & Onboarding</h2> <span class="phase-count">6 prompts</span> </div> <div class="prompts-grid"> <div class="prompt-card"> <span class="prompt-number">Prompt 09</span> <div class="prompt-title">Login Screen</div> <div class="prompt-content">Create a beautiful login screen with glassmorphism: 1. Create /src/screens/auth/LoginScreen.tsx: - Full-screen gradient background (emerald to purple) - Centered glass card with login form - App logo and tagline at top - Email and password inputs with icons - "Forgot Password?" link - Login button with loading state - Social login buttons (Google, Apple) - "New user? Sign up" link at bottom 2. Implement functionality: - Form validation with react-hook-form - Show/hide password toggle - Keyboard avoiding view - Auto-focus email field - Remember me checkbox (saves email) - Error messages with shake animation - Success animation before navigation 3. Add micro-interactions: - Input focus animations - Button press feedback - Loading spinner overlay - Success checkmark animation 4. Handle edge cases: - Network errors - Invalid credentials - Account not verified - Too many attempts</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Screen looks beautiful with glass effect</li> <li>Can login with test credentials</li> <li>Proper error handling displayed</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 10</span> <div class="prompt-title">Signup Screen</div> <div class="prompt-content">Create an engaging signup screen with smooth flow: 1. Create /src/screens/auth/SignupScreen.tsx: - Similar design to login but with more fields - Full name, email, password, confirm password - Password strength indicator (weak/medium/strong) - Terms and conditions checkbox - Marketing emails opt-in 2. Multi-step signup process: - Step 1: Email and password - Step 2: Personal details - Step 3: Dietary preferences (optional) - Progress bar at top - Smooth transitions between steps 3. Dietary preferences selector: - Grid of diet options (Vegetarian, Vegan, Keto, etc.) - Allergy inputs (nuts, dairy, gluten, etc.) - Cooking skill level (Beginner, Intermediate, Expert) - Can skip for later 4. Implement: - Real-time email availability check - Password requirements tooltip - Social signup (Google, Apple) - Email verification flow - Welcome email trigger 5. Success flow: - Confetti animation on completion - "Welcome to QuickCook!" message - Auto-login after signup - Navigate to onboarding</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Can complete full signup flow</li> <li>User created in Supabase</li> <li>Dietary preferences saved</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 11</span> <div class="prompt-title">Forgot Password Screen</div> <div class="prompt-content">Create a simple forgot password flow: 1. Create /src/screens/auth/ForgotPasswordScreen.tsx: - Clean glass card design - Email input field - Clear instructions text - Send reset link button - Back to login link 2. Implement password reset flow: - Validate email format - Call Supabase resetPassword - Show success message - Countdown timer (60s) before resend - Check email instructions 3. Add animations: - Slide in from right - Success envelope animation - Loading state for sending 4. Handle edge cases: - Email not found (don't reveal for security) - Too many reset attempts - Network errors - Expired reset links</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Can request password reset</li> <li>Email received (check inbox)</li> <li>Timer prevents spam</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 12</span> <div class="prompt-title">Onboarding Tutorial</div> <div class="prompt-content">Create an engaging 3-screen onboarding tutorial: 1. Create /src/screens/onboarding/OnboardingScreen.tsx: - Swipeable screens using react-native-gesture-handler - Skip button in top right - Dot indicators at bottom - Next/Get Started buttons 2. Screen 1: "Pantry-First Cooking" - Animation of ingredients turning into meals - "Tell us what you have, we'll show you what to make" - Illustration of pantry items 3. Screen 2: "Step-by-Step Guidance" - Phone mockup showing cooking mode - "Never get lost mid-recipe again" - Animated timer and steps 4. Screen 3: "Save Money, Reduce Waste" - Stats animation: "Save $47/month on groceries" - "Use what you have before it expires" - Premium features teaser 5. Implement: - Smooth parallax animations - Progress dots that fill up - Haptic feedback on swipe - Save onboarding completion - Only show once per user</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Can swipe through all screens</li> <li>Skip button works</li> <li>Doesn't show again after completion</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 13</span> <div class="prompt-title">Social Authentication</div> <div class="prompt-content">Implement Google and Apple Sign In: 1. Configure Google Sign In: - Install expo-auth-session and expo-web-browser - Set up Google Cloud Console OAuth 2.0 - Configure for iOS, Android, and Web - Add proper redirect URIs 2. Configure Apple Sign In: - Install expo-apple-authentication - Configure in Apple Developer Console - Set up Sign in with Apple capability - Handle iOS-only availability 3. Create /src/services/socialAuth.ts: - googleSignIn() method - appleSignIn() method - Link social accounts to Supabase - Handle profile data extraction - Profile picture handling 4. Update login/signup screens: - Add social login buttons - "Continue with Google" button - "Sign in with Apple" button (iOS only) - Loading states for social auth 5. Handle edge cases: - Account already exists with email - Social login cancelled - Network errors during OAuth - Profile data missing</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Google Sign In works on all platforms</li> <li>Apple Sign In works on iOS</li> <li>Profile data properly saved</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 14</span> <div class="prompt-title">Auth Persistence & Security</div> <div class="prompt-content">Implement secure authentication persistence: 1. Create /src/services/authManager.ts: - Token refresh logic - Biometric authentication setup - Session management - Auto-logout on app background (optional) 2. Implement biometric authentication: - Install expo-local-authentication - Face ID/Touch ID for iOS - Fingerprint for Android - Optional enable in settings - Fallback to password 3. Security features: - JWT token expiry handling - Refresh token rotation - Secure storage of credentials - Clear tokens on logout - Device binding (optional) 4. Session management: - Track last activity - Auto-logout after inactivity - Remember me functionality - Multiple device sessions view 5. Add to Profile settings: - Enable biometric toggle - Active sessions list - Sign out all devices - Security settings section</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>App stays logged in after restart</li> <li>Biometric login works (if available)</li> <li>Tokens refresh automatically</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> </div> </div> <!-- PHASE 2: CORE FEATURES --> <div class="phase-container"> <div class="phase-header"> <h2>Phase 2: Core Recipe Features</h2> <span class="phase-count">10 prompts</span> </div> <div class="prompts-grid"> <div class="prompt-card"> <span class="prompt-number">Prompt 15</span> <div class="prompt-title">Home Screen - Ingredient Input</div> <div class="prompt-content">Create the main home screen with beautiful ingredient input: 1. Create /src/screens/main/HomeScreen.tsx: - Header with app logo and user avatar - "What's in your pantry?" title - Recipe count for today (e.g., "3/5 recipes remaining") 2. Ingredient input section: - Large, friendly input field with placeholder - Three input methods as icon buttons: * Type (keyboard icon) * Speak (microphone icon) * Scan (barcode icon) - Auto-complete dropdown as user types 3. Ingredient pills display: - Added ingredients show as pills below - Each pill has ingredient name and X to remove - Pills animate in with pop effect - Can drag to reorder (optional) - Different colors for different food categories 4. Dietary filters section: - Horizontal scrollable filter chips - Vegetarian, Vegan, Gluten-Free, Keto, etc. - Premium filters locked with crown icon - Selected filters highlighted in primary color 5. Find Recipes button: - Large, prominent button at bottom - Disabled state when no ingredients - Loading state with spinner - Subtle pulse animation to draw attention 6. Quick actions: - "Last Used Ingredients" for quick re-add - "Popular Combinations" suggestions - "Surprise Me" random ingredients</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Can add ingredients via typing</li> <li>Pills appear with animation</li> <li>Filters are selectable</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 16</span> <div class="prompt-title">Voice Input Integration</div> <div class="prompt-content">Implement voice input using OpenAI Whisper: 1. Install and configure: - expo-av for audio recording - Set up Whisper API integration - Request microphone permissions 2. Create /src/components/VoiceInput.tsx: - Microphone button with hold-to-record - Visual wave animation while recording - "Listening..." text display - Auto-stop after 30 seconds 3. Voice processing logic: - Record audio in proper format for Whisper - Send to OpenAI Whisper API - Parse transcription for ingredients - Handle multiple ingredients in one phrase - Support phrases like "I have chicken, rice, and broccoli" 4. Natural language processing: - Extract quantities ("2 pounds of chicken") - Handle variations ("tomatoes" vs "tomato") - Ignore filler words - Support multiple languages (optional) 5. Feedback and confirmation: - Show transcription before adding - Allow editing transcribed text - Confidence indicator for recognition - Error messages for unclear audio 6. Polish: - Haptic feedback on start/stop - Cancel recording gesture - Background noise handling - Voice coaching tips</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Microphone permission requested</li> <li>Can record and transcribe voice</li> <li>Ingredients extracted correctly</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 17</span> <div class="prompt-title">Barcode Scanner</div> <div class="prompt-content">Implement barcode scanning for ingredients: 1. Install and configure: - expo-barcode-scanner - Camera permissions handling - Spoonacular API for barcode lookup 2. Create /src/screens/main/BarcodeScannerScreen.tsx: - Full-screen camera view - Scanning frame overlay - Torch/flashlight toggle - Close button to return 3. Scanning interface: - Auto-focus on barcode - Beep sound on successful scan - Vibration feedback - Show product preview card 4. Product lookup flow: - Call Spoonacular barcode API - Show loading state - Display product name and image - Extract main ingredient - Add to ingredients list button 5. Multi-scan mode: - Keep scanning after each item - Show running list of scanned items - Bulk add all items button - Clear all button 6. Error handling: - Product not found message - Network error handling - Manual ingredient entry fallback - Try again button 7. UI Polish: - Animated scan line - Brightness boost in dark environments - History of recent scans - Tips for better scanning</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Camera opens for scanning</li> <li>Can scan a real barcode</li> <li>Product info retrieved</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 18</span> <div class="prompt-title">Recipe Generation & Results</div> <div class="prompt-content">Create AI-powered recipe generation and results display: 1. Create /src/services/recipeGenerator.ts: - Build structured prompt for GPT - Include ingredients, dietary filters, cooking time - Request JSON format with specific schema - Use GPT-3.5 for free users, GPT-4 for premium 2. Prompt engineering template:
Generate 5 recipes using ONLY these ingredients: [ingredients]
Dietary requirements: [filters]
Format as JSON array with: title, cookingTime, difficulty, servings, ingredients (with amounts), instructions (step array), nutrition
Make recipes varied in cuisine and cooking method
3. Create /src/screens/main/RecipeResultsScreen.tsx: - Loading state with cooking puns - Grid layout for recipe cards (2 columns) - Each card shows: * Recipe image (AI-generated or stock) * Title * Cooking time chip * Difficulty indicator * Diet tags * Start Cooking button 4. Recipe card interactions: - Press to expand with more details - Save button (bookmark icon) - Share button - Nutrition preview 5. Filtering and sorting: - Sort by time, difficulty - Filter by cuisine type - Hide recipes with missing ingredients - Premium filters (calories, protein, etc.) 6. Error states: - No recipes found - Suggest removing filters - Try different ingredients - API error handling</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Recipes generated from ingredients</li> <li>Results display in grid</li> <li>Can tap to view details</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 19</span> <div class="prompt-title">Recipe Detail Screen</div> <div class="prompt-content">Create a beautiful recipe detail screen: 1. Create /src/screens/main/RecipeDetailScreen.tsx: - Hero image at top (parallax scroll effect) - Recipe title overlay on image - Floating action buttons (Save, Share, Start Cooking) 2. Recipe information tabs: - Ingredients tab: * Grouped by category * Checkboxes for shopping list * Serving size adjuster * Substitution suggestions - Instructions tab: * Numbered steps * Estimated time per step * Tips and tricks section * Video links (if available) - Nutrition tab: * Calories, protein, carbs, fat * Circular progress charts * Vitamin/mineral breakdown * Dietary badges 3. Interactive features: - Adjust serving size (recalculates ingredients) - Mark ingredients as "have" or "need" - Add missing items to shopping list - Rate recipe (1-5 stars) - Add personal notes 4. Social features: - User reviews section - Photos from other cooks - Cooking tips from community - Number of times cooked 5. Premium features: - Meal prep instructions - Wine pairing suggestions - Kitchen timer integration - Nutritionist notes</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Recipe displays with all sections</li> <li>Can adjust serving size</li> <li>Save/share buttons work</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 20</span> <div class="prompt-title">Cooking Mode Interface</div> <div class="prompt-content">Create an immersive cooking experience: 1. Create /src/screens/main/CookingModeScreen.tsx: - Full-screen step-by-step interface - Large, readable text for instructions - Keep screen on during cooking - Voice commands support 2. Step navigation: - Current step highlighted - Previous/next step buttons - Progress indicator at top - Step completion checkmarks 3. Interactive timers: - Multiple simultaneous timers - Visual countdown displays - Alarm sounds and vibrations - Timer labels ("Boil water", "Marinate chicken") 4. Smart features: - Voice reading of instructions - Hands-free "next step" command - Auto-advance for timed steps - Pause/resume functionality 5. Kitchen tools: - Measurement converter - Temperature converter - Substitution suggestions - Emergency help ("What if I burned it?") 6. Premium features: - Video demonstrations - Chef tips popup - Technique explanations - Troubleshooting guide 7. Completion flow: - Photo capture of finished dish - Rate the recipe - Share to social media - Add to meal history</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Can navigate through cooking steps</li> <li>Timers work correctly</li> <li>Screen stays on during cooking</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 21</span> <div class="prompt-title">Recipe Search & Discovery</div> <div class="prompt-content">Implement advanced recipe search and discovery: 1. Create /src/screens/main/DiscoverScreen.tsx: - Featured recipes carousel - Trending recipes section - Search bar with advanced filters - Recipe collections (Asian, Quick & Easy, etc.) 2. Search functionality: - Fuzzy search by recipe name - Search by cuisine type - Search by cooking time - Search by dietary restrictions - Search by available ingredients 3. Advanced filters: - Preparation time slider - Difficulty level - Number of servings - Calorie range - Macronutrient ratios (premium) 4. Recipe collections: - Curated themed collections - Seasonal recipes - Holiday specials - User-created collections - Community favorites 5. Discovery algorithms: - Personalized recommendations - Based on saved recipes - Based on dietary preferences - Based on cooking history - Similar recipe suggestions 6. Social discovery: - Recipes from friends - Community trending - Chef recommendations - Local cuisine suggestions</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Search returns relevant results</li> <li>Filters work correctly</li> <li>Collections display properly</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 22</span> <div class="prompt-title">Saved Recipes Management</div> <div class="prompt-content">Create a comprehensive saved recipes system: 1. Create /src/screens/main/SavedRecipesScreen.tsx: - Grid view of saved recipe cards - Search within saved recipes - Filter by tags, difficulty, time - Sort by date saved, rating, cook count 2. Recipe organization: - Custom tags system - Create recipe folders/collections - Drag and drop organization - Bulk actions (delete, move, tag) 3. Recipe cards: - Recipe thumbnail - Title and rating - Last cooked date - Cook count badge - Quick action buttons 4. Interaction features: - Swipe actions (cook, share, delete) - Long press for batch selection - Quick rate from card - Add notes without opening 5. Free vs Premium limits: - Free: 10 saved recipes max - Premium: Unlimited saves - Upgrade prompt when limit reached - Export recipes feature (premium) 6. Offline access: - Cache recipe data locally - Download for offline cooking - Sync when online - Offline indicator</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Can save and view recipes</li> <li>Search and filters work</li> <li>Swipe actions function</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 23</span> <div class="prompt-title">Recipe Sharing & Social</div> <div class="prompt-content">Implement social sharing and community features: 1. Recipe sharing functionality: - Generate beautiful recipe cards for sharing - Share to Instagram, Facebook, Twitter - Copy shareable link - WhatsApp recipe sharing - Email recipe to friends 2. Create /src/components/RecipeShareCard.tsx: - Beautiful designed share image - Recipe photo, title, key details - QuickCook branding - QR code for app download 3. Deep linking system: - Handle incoming recipe links - Parse recipe data from links - Auto-save shared recipes - Link attribution tracking 4. Community features: - Rate others' recipes - Leave cooking tips/reviews - Upload photos of cooked dishes - Follow favorite recipe creators 5. User profiles: - Public recipe collections - Cooking achievements/badges - Recipe creation stats - Follower/following system 6. Social login integration: - Import contacts for sharing - Find friends who use the app - Social media profile integration - Privacy controls</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Can share recipe to social media</li> <li>Share links work properly</li> <li>Recipe cards look professional</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 24</span> <div class="prompt-title">Nutrition Analysis & Health</div> <div class="prompt-content">Add comprehensive nutrition tracking and health features: 1. Create /src/services/nutritionAnalyzer.ts: - Calculate detailed nutrition for recipes - Integrate with USDA nutrition database - Track daily nutrition intake - Identify nutritional gaps 2. Nutrition dashboard: - Daily nutrition summary - Macro and micronutrient tracking - Visual charts and progress bars - Weekly/monthly nutrition trends 3. Health insights: - Personalized nutrition recommendations - Identify vitamin/mineral deficiencies - Suggest recipes to meet goals - Health score for recipes 4. Dietary goal setting: - Calorie targets - Macronutrient ratios - Specific nutrition goals - Weight management integration 5. Premium health features: - Detailed nutrient analysis - Meal planning for health goals - Nutritionist consultations - Lab result integration 6. Recipe nutrition optimization: - Suggest healthier ingredient swaps - Portion size recommendations - Nutrient density scoring - Allergen detection and warnings</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Nutrition data displays for recipes</li> <li>Daily tracking works</li> <li>Health insights are relevant</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> </div> </div> <!-- PHASE 3: MEAL PLANNING --> <div class="phase-container"> <div class="phase-header"> <h2>Phase 3: Meal Planning & Shopping</h2> <span class="phase-count">8 prompts</span> </div> <div class="prompts-grid"> <div class="prompt-card"> <span class="prompt-number">Prompt 25</span> <div class="prompt-title">Weekly Meal Planner</div> <div class="prompt-content">Create an intuitive meal planning interface: 1. Create /src/screens/main/MealPlannerScreen.tsx: - Calendar view of the week - Drag and drop recipes to days - Breakfast, lunch, dinner slots - Visual meal overview 2. Meal planning features: - Add recipes to specific meals - Duplicate meals across days - Smart suggestions based on ingredients - Prep time optimization 3. Weekly view interface: - Swipe between weeks - Today indicator - Meal thumbnails in slots - Quick add/remove actions 4. Meal suggestions: - AI-powered meal recommendations - Based on dietary preferences - Consider prep time and complexity - Balance nutrition across week 5. Planning tools: - Prep time calculator - Ingredient overlap optimization - Leftover utilization - Batch cooking suggestions 6. Export and sharing: - Export meal plan as PDF - Share weekly plan with family - Print-friendly grocery list - Calendar app integration</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Can add recipes to calendar days</li> <li>Drag and drop works smoothly</li> <li>Week navigation functions</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 26</span> <div class="prompt-title">Smart Shopping List</div> <div class="prompt-content">Build an intelligent shopping list generator: 1. Create /src/screens/main/ShoppingListScreen.tsx: - Auto-generated from meal plan - Organized by store sections - Check off items as you shop - Add custom items 2. Smart list generation: - Consolidate duplicate ingredients - Calculate total quantities needed - Account for pantry items you have - Suggest optimal package sizes 3. Store organization: - Group by grocery store sections - Customizable store layout - Common store templates - Personal shopping patterns 4. Shopping features: - Check items off list - Add notes to items - Price tracking and budgeting - Sharing with family members 5. Premium features: - Price comparison across stores - Coupon integration - Delivery service integration - Bulk buying recommendations 6. List management: - Save frequently bought items - Quick add common ingredients - Voice add items while cooking - Barcode scan to add items</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Shopping list generates from meal plan</li> <li>Items grouped by store section</li> <li>Can check off items</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 27</span> <div class="prompt-title">Pantry Inventory Management</div> <div class="prompt-content">Create a digital pantry management system: 1. Create /src/screens/main/PantryScreen.tsx: - Grid view of pantry items - Add items via barcode scan - Manual item entry - Search and filter items 2. Inventory tracking: - Quantity tracking - Expiration date monitoring - Low stock alerts - Usage predictions 3. Smart features: - Barcode scanning for quick add - Photo recognition of ingredients - Recipe suggestions based on expiring items - Automated shopping list additions 4. Organization: - Categories (dairy, produce, pantry, etc.) - Custom tags and labels - Storage location tracking - Bulk item management 5. Expiration management: - Color-coded expiration warnings - Push notifications for expiring items - Waste reduction suggestions - Recipe prioritization by expiration 6. Integration features: - Sync with shopping list - Update from grocery receipts - Smart home integration - Family sharing of pantry data</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Can add items to pantry</li> <li>Barcode scanning works</li> <li>Expiration tracking functions</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 28</span> <div class="prompt-title">Meal Prep Planning</div> <div class="prompt-content">Implement advanced meal prep functionality: 1. Create /src/screens/main/MealPrepScreen.tsx: - Batch cooking calculator - Prep timeline generator - Container organization - Storage instructions 2. Batch cooking features: - Scale recipes for meal prep - Identify prep-friendly recipes - Combine similar prep steps - Equipment optimization 3. Prep timeline: - Order tasks by efficiency - Parallel cooking suggestions - Time estimates for each step - Make-ahead component identification 4. Storage solutions: - Container size recommendations - Freezer-friendly modifications - Reheating instructions - Storage life estimates 5. Portion control: - Individual portion containers - Macro-balanced meal prep - Family vs individual sizing - Calorie-controlled portions 6. Premium features: - Professional meal prep plans - Bulk cooking worksheets - Freezer meal conversions - Prep day scheduling</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Meal prep timeline generates</li> <li>Recipes scale properly</li> <li>Storage instructions clear</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 29</span> <div class="prompt-title">Budget & Cost Tracking</div> <div class="prompt-content">Add comprehensive budget and cost tracking: 1. Create /src/screens/main/BudgetScreen.tsx: - Monthly budget overview - Spending by category - Cost per meal tracking - Savings calculations 2. Cost analysis: - Recipe cost calculation - Price per serving - Compare home cooking vs dining out - Track grocery spending trends 3. Budget features: - Set monthly grocery budget - Category-wise budgets - Alert when nearing limits - Suggest budget-friendly alternatives 4. Savings tracking: - Money saved by cooking at home - Reduced food waste savings - Bulk buying analytics - Seasonal produce suggestions 5. Smart recommendations: - Budget-friendly recipe suggestions - Generic brand alternatives - Seasonal ingredient swaps - Bulk buying opportunities 6. Premium features: - Advanced cost analytics - Store price comparison - Historical price tracking - Investment in cooking tools ROI</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Budget tracking displays correctly</li> <li>Recipe costs calculate accurately</li> <li>Savings insights are meaningful</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 30</span> <div class="prompt-title">Recipe Import & Export</div> <div class="prompt-content">Build recipe import/export functionality: 1. Create /src/services/recipeImporter.ts: - Import from popular recipe websites - Parse recipe URLs - Import from PDF/text files - Bulk import capabilities 2. Import sources: - AllRecipes, Food Network, etc. - Personal blog recipes - Family recipe documents - Cookbook scanning (OCR) 3. Export options: - PDF recipe cards - Print-friendly format - Recipe book generation - Share recipe collections 4. Data formatting: - Standardize ingredient formats - Parse cooking instructions - Extract nutrition information - Categorize imported recipes 5. Quality control: - Validate imported data - Suggest corrections - Preview before import - Duplicate detection 6. Premium features: - OCR text recognition - Batch URL import - Professional recipe formatting - Cookbook publishing tools</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Can import recipe from URL</li> <li>Data parses correctly</li> <li>Export to PDF works</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 31</span> <div class="prompt-title">Family & Household Management</div> <div class="prompt-content">Implement family sharing and household features: 1. Create family account system: - Invite family members - Shared meal plans - Collaborative shopping lists - Recipe sharing within family 2. Family features: - Kids' meal preferences - Allergy tracking for family - Individual dietary restrictions - Age-appropriate portions 3. Household coordination: - Assign cooking duties - Track who's cooking when - Meal preferences voting - Cooking schedule coordination 4. Communication tools: - Family meal comments - Shopping list notes - Recipe rating by family - Meal feedback system 5. Child-friendly features: - Kid-safe recipe mode - Simple cooking instructions - Fun cooking challenges - Reward system for helping 6. Management tools: - Family member permissions - Shared grocery budget - Household inventory access - Emergency meal contacts</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Can invite family members</li> <li>Shared meal plans work</li> <li>Permissions system functions</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 32</span> <div class="prompt-title">Smart Kitchen Integration</div> <div class="prompt-content">Add smart home and IoT kitchen integration: 1. Smart appliance integration: - Connect to smart ovens - Instant Pot integration - Smart thermometer connectivity - Refrigerator inventory sync 2. Voice assistant support: - Alexa/Google Assistant skills - Voice-controlled cooking mode - Hands-free recipe reading - Timer management via voice 3. IoT features: - Smart scale integration - Connected measuring cups - Temperature monitoring - Automated cooking adjustments 4. Kitchen device coordination: - Multi-device cooking orchestration - Timing synchronization - Temperature alerts - Safety monitoring 5. Data collection: - Cooking pattern analysis - Appliance usage optimization - Energy consumption tracking - Performance recommendations 6. Future integrations: - Smart grocery delivery - Automated inventory updates - Predictive cooking suggestions - Kitchen equipment maintenance</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Voice commands work (if available)</li> <li>Smart device connections possible</li> <li>Integration APIs function</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> </div> </div> <!-- PHASE 4: PREMIUM FEATURES --> <div class="phase-container"> <div class="phase-header"> <h2>Phase 4: Premium Features & Monetization</h2> <span class="phase-count">8 prompts</span> </div> <div class="prompts-grid"> <div class="prompt-card"> <span class="prompt-number">Prompt 33</span> <div class="prompt-title">Subscription System Setup</div> <div class="prompt-content">Implement Stripe subscription system: 1. Create subscription tiers: - Free: 5 recipes/day, 10 saved recipes - Premium ($9.99/month): Unlimited recipes, advanced features - Family ($14.99/month): 6 family accounts, premium features 2. Stripe integration: - Set up Stripe products and prices - Implement subscription checkout - Handle subscription lifecycle - Manage payment methods 3. Create /src/screens/subscription/UpgradeScreen.tsx: - Beautiful pricing cards - Feature comparison table - Free trial offer - Social proof and testimonials 4. Subscription management: - View current plan - Change subscription - Cancel subscription - Billing history 5. Feature gating: - Check premium status before features - Graceful upgrade prompts - Premium feature previews - Usage limit notifications 6. Payment security: - PCI compliance - Secure payment processing - Failed payment handling - Refund processing</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Stripe checkout works</li> <li>Subscription status updates</li> <li>Feature gating functions</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 34</span> <div class="prompt-title">Advanced AI Features</div> <div class="prompt-content">Implement premium AI-powered features: 1. GPT-4 recipe generation: - More creative and complex recipes - Better ingredient substitutions - Cuisine-specific authenticity - Professional chef techniques 2. AI nutritionist: - Personalized nutrition advice - Meal plan optimization - Health condition considerations - Supplement recommendations 3. Smart recipe adaptation: - Dietary restriction conversion - Skill level adjustment - Equipment substitutions - Regional ingredient swaps 4. AI cooking assistant: - Real-time cooking help - Problem-solving during cooking - Technique explanations - Ingredient rescue suggestions 5. Personalization engine: - Learning from user preferences - Improving recommendations - Taste profile development - Cooking skill assessment 6. Premium AI features: - DALL-E recipe image generation - Voice-powered recipe creation - Nutritional goal optimization - Professional meal planning</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>GPT-4 generates better recipes</li> <li>AI nutritionist provides advice</li> <li>Personalization improves over time</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 35</span> <div class="prompt-title">Professional Chef Content</div> <div class="prompt-content">Add premium professional chef content: 1. Chef partnerships: - Exclusive recipes from known chefs - Video cooking demonstrations - Professional techniques library - Chef Q&A sessions 2. Masterclass integration: - Step-by-step technique videos - Professional cooking tips - Equipment recommendations - Knife skills training 3. Restaurant-quality recipes: - Fine dining at home - Professional plating guides - Wine pairing expertise - Advanced cooking methods 4. Seasonal content: - Monthly chef challenges - Seasonal ingredient highlights - Holiday special menus - Regional cuisine deep dives 5. Interactive learning: - Chef-led live cooking sessions - Technique assessment quizzes - Cooking skill progression - Certificate programs 6. Premium content library: - High-quality recipe videos - Professional photography - Detailed technique explanations - Equipment buying guides</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Chef content displays properly</li> <li>Videos play smoothly</li> <li>Content is premium-gated</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 36</span> <div class="prompt-title">Advanced Analytics Dashboard</div> <div class="prompt-content">Create comprehensive analytics for premium users: 1. Cooking analytics: - Recipes cooked per month - Favorite cuisines analysis - Cooking skill progression - Time spent cooking trends 2. Nutrition analytics: - Daily/weekly nutrition trends - Macro balance optimization - Vitamin/mineral intake - Health goal progress 3. Financial analytics: - Money saved cooking at home - Cost per meal trends - Budget optimization insights - Grocery spending patterns 4. Efficiency analytics: - Kitchen time optimization - Meal prep effectiveness - Ingredient usage efficiency - Waste reduction metrics 5. Personalization insights: - Taste preference evolution - Recipe success predictions - Cooking pattern recognition - Skill development tracking 6. Export capabilities: - PDF analytics reports - Data export for nutritionists - Sharing with healthcare providers - Year-end cooking summary</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Analytics charts display correctly</li> <li>Data calculations are accurate</li> <li>Export features work</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 37</span> <div class="prompt-title">AI Meal Planning Assistant</div> <div class="prompt-content">Build an intelligent meal planning AI: 1. Smart meal planning: - AI-generated weekly meal plans - Nutrition goal optimization - Budget constraint consideration - Family preference balancing 2. Intelligent suggestions: - Seasonal ingredient prioritization - Sale item incorporation - Leftover utilization - Prep time optimization 3. Adaptive learning: - Learn from user choices - Improve recommendations - Dietary preference evolution - Success pattern recognition 4. Health integration: - Medical condition considerations - Fitness goal alignment - Age-appropriate nutrition - Supplement integration 5. Lifestyle optimization: - Work schedule consideration - Social event planning - Travel meal preparation - Stress-based meal suggestions 6. Premium AI features: - Predictive meal planning - Advanced health analytics - Professional nutritionist AI - Custom dietary protocols</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>AI generates relevant meal plans</li> <li>Learning improves suggestions</li> <li>Health goals are considered</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 38</span> <div class="prompt-title">Premium Recipe Collections</div> <div class="prompt-content">Create exclusive premium recipe collections: 1. Curated collections: - Michelin-starred restaurant recipes - World cuisine authenticity - Dietary-specific collections - Seasonal premium menus 2. Expert collections: - Celebrity chef exclusives - Nutritionist-approved recipes - Fitness trainer meal plans - Cultural authenticity verified 3. Specialized content: - Fermentation and preservation - Advanced baking techniques - Molecular gastronomy basics - Traditional cooking methods 4. Interactive collections: - Progressive skill building - Technique mastery paths - Cultural cooking journeys - Challenge-based learning 5. Exclusive access: - Early access to new collections - Limited-time chef collaborations - Premium-only seasonal menus - Advanced technique tutorials 6. Collection features: - High-resolution photography - Professional video content - Detailed technique explanations - Equipment recommendations</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Premium collections are accessible</li> <li>Content quality is high</li> <li>Access control works properly</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 39</span> <div class="prompt-title">Referral & Loyalty Program</div> <div class="prompt-content">Implement referral and loyalty systems: 1. Referral program: - Invite friends for premium time - Track referral success - Reward both referrer and referee - Social sharing integration 2. Loyalty rewards: - Points for daily cooking - Recipe rating rewards - Community participation points - Streak maintenance bonuses 3. Achievement system: - Cooking milestone badges - Cuisine mastery certificates - Technique achievement levels - Community contribution awards 4. Premium perks: - Extended trial periods - Exclusive content access - Priority customer support - Beta feature access 5. Gamification elements: - Daily cooking challenges - Weekly cooking goals - Monthly cuisine challenges - Annual cooking competitions 6. Reward redemption: - Free premium months - Exclusive recipe access - Cooking equipment discounts - Chef consultation calls</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Referral tracking works</li> <li>Points accumulate correctly</li> <li>Rewards can be redeemed</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 40</span> <div class="prompt-title">Customer Support & Help</div> <div class="prompt-content">Build comprehensive customer support system: 1. In-app help system: - Searchable help articles - Video tutorials - FAQ section - Troubleshooting guides 2. Contact options: - In-app chat support - Email support system - Priority premium support - Phone support for premium 3. AI support assistant: - Instant answer bot - Common problem resolution - Escalation to human support - Learning from interactions 4. Knowledge base: - Getting started guides - Feature explanations - Cooking tips and tricks - Technical troubleshooting 5. Community support: - User forums - Peer help system - Expert community answers - Recipe troubleshooting 6. Support analytics: - Response time tracking - Issue resolution rates - Customer satisfaction scores - Common problem identification</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Help articles are accessible</li> <li>Contact forms work</li> <li>AI bot responds appropriately</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> </div> </div> <!-- PHASE 5: USER EXPERIENCE --> <div class="phase-container"> <div class="phase-header"> <h2>Phase 5: User Experience & Optimization</h2> <span class="phase-count">6 prompts</span> </div> <div class="prompts-grid"> <div class="prompt-card"> <span class="prompt-number">Prompt 41</span> <div class="prompt-title">Profile & Settings Screen</div> <div class="prompt-content">Create comprehensive user profile and settings: 1. Create /src/screens/profile/ProfileScreen.tsx: - User photo and basic info - Cooking statistics summary - Achievement badges display - Quick settings access 2. Personal information: - Profile photo upload - Display name editing - Bio/description field - Cooking experience level 3. Preferences settings: - Dietary restrictions - Cuisine preferences - Cooking skill level - Notification preferences 4. App settings: - Theme selection (light/dark/auto) - Language selection - Units (metric/imperial) - Voice settings 5. Privacy controls: - Profile visibility - Recipe sharing permissions - Data collection preferences - Account deletion option 6. Account management: - Change password - Email verification - Two-factor authentication - Login sessions management</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Profile displays user information</li> <li>Settings save properly</li> <li>Photo upload works</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 42</span> <div class="prompt-title">Notification System</div> <div class="prompt-content">Implement comprehensive push notification system: 1. Notification types: - Meal reminders - Cooking timer alerts - Expiration warnings - New recipe suggestions 2. Smart scheduling: - Meal time reminders - Prep time notifications - Shopping day alerts - Weekly meal plan reminders 3. Personalized notifications: - Based on cooking habits - Dietary goal reminders - Achievement celebrations - Social activity updates 4. Notification preferences: - Granular control options - Time-based scheduling - Do not disturb modes - Emergency override settings 5. Rich notifications: - Recipe images in notifications - Quick action buttons - Inline timer controls - Shopping list previews 6. Analytics tracking: - Notification open rates - Action completion rates - Optimal timing analysis - Personalization effectiveness</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Notifications appear on device</li> <li>Settings control notifications</li> <li>Rich content displays</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 43</span> <div class="prompt-title">Offline Mode & Sync</div> <div class="prompt-content">Implement robust offline functionality: 1. Offline capabilities: - Cache favorite recipes - Download cooking mode content - Offline shopping lists - Basic recipe search 2. Data synchronization: - Smart sync when online - Conflict resolution - Background sync - Incremental updates 3. Storage management: - Local database setup - Cache size limits - Automatic cleanup - User storage preferences 4. Offline indicators: - Connection status display - Offline mode indicators - Sync status feedback - Error handling 5. Critical offline features: - Cooking mode always works - Timer functionality - Saved recipes access - Shopping list availability 6. Performance optimization: - Efficient data compression - Smart caching strategies - Background downloading - Network usage optimization</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>App works without internet</li> <li>Data syncs when back online</li> <li>Offline indicators show correctly</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 44</span> <div class="prompt-title">Performance Optimization</div> <div class="prompt-content">Optimize app performance and user experience: 1. Image optimization: - Lazy loading for recipe images - Progressive image loading - WebP format support - Image caching strategy 2. Memory management: - Efficient state management - Component cleanup - Memory leak prevention - Background process optimization 3. Loading optimization: - Skeleton screens - Progressive loading - Preloading strategies - Bundle size optimization 4. Network optimization: - Request batching - Caching strategies - Compression - CDN utilization 5. Animation performance: - Hardware acceleration - 60fps animations - Reduced motion options - Performance monitoring 6. Monitoring and analytics: - Performance metrics tracking - Crash reporting - User experience analytics - Performance alerts</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>App loads quickly</li> <li>Smooth animations</li> <li>Minimal memory usage</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 45</span> <div class="prompt-title">Accessibility Features</div> <div class="prompt-content">Implement comprehensive accessibility features: 1. Visual accessibility: - High contrast mode - Large text support - Color blind friendly design - Screen reader compatibility 2. Motor accessibility: - Large touch targets - Voice control integration - Switch control support - Gesture alternatives 3. Cognitive accessibility: - Simple navigation - Clear instructions - Consistent interface - Reduced cognitive load 4. Hearing accessibility: - Visual timer indicators - Haptic feedback - Subtitle support - Visual notification alerts 5. Assistive technology: - VoiceOver support - TalkBack compatibility - Keyboard navigation - External device support 6. Accessibility testing: - Automated accessibility checks - User testing with disabilities - Accessibility audit compliance - Continuous improvement</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Screen reader narrates content</li> <li>High contrast mode works</li> <li>Large text scales properly</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 46</span> <div class="prompt-title">Internationalization & Localization</div> <div class="prompt-content">Add multi-language and regional support: 1. Language support setup: - React Native internationalization - Dynamic language switching - RTL language support - Pluralization handling 2. Initial languages: - English (default) - Spanish - French - German - Italian 3. Localized content: - UI text translation - Recipe content localization - Ingredient name translations - Cooking term localization 4. Regional adaptations: - Measurement unit preferences - Currency localization - Date/time formatting - Cultural dietary preferences 5. Content management: - Translation management system - Content synchronization - Quality assurance - Community translations 6. Implementation features: - Language detection - Fallback languages - Partial translation handling - Dynamic content loading</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Language switching works</li> <li>Text displays in chosen language</li> <li>RTL languages display correctly</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> </div> </div> <!-- PHASE 6: DEPLOYMENT --> <div class="phase-container"> <div class="phase-header"> <h2>Phase 6: Deployment & Launch</h2> <span class="phase-count">6 prompts</span> </div> <div class="prompts-grid"> <div class="prompt-card"> <span class="prompt-number">Prompt 47</span> <div class="prompt-title">App Store Preparation</div> <div class="prompt-content">Prepare app for App Store and Google Play: 1. App Store assets: - App icons (all required sizes) - Launch screens - Screenshot sets - App preview videos 2. Store listing optimization: - Compelling app description - Keyword optimization - Feature highlights - User benefit focus 3. App metadata: - App name and subtitle - Category selection - Age rating compliance - Privacy policy URL 4. Review guidelines compliance: - iOS App Store guidelines - Google Play policies - Content guidelines - Technical requirements 5. Beta testing setup: - TestFlight beta testing - Google Play Internal Testing - Beta tester recruitment - Feedback collection 6. Launch preparation: - Marketing materials - Press kit creation - Launch strategy - Promotional timeline</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>All app store assets prepared</li> <li>Metadata completed</li> <li>Guidelines compliance verified</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)">Copy Prompt</button> </div> <div class="prompt-card"> <span class="prompt-number">Prompt 48</span> <div class="prompt-title">Production Deployment</div> <div class="prompt-content">Deploy app to production environment: 1. Production build setup: - Environment configuration - Security key management - API endpoint configuration - Performance optimization 2. Backend deployment: - Supabase production setup - Database migration - API rate limiting - Security hardening 3. CDN and assets: - Image CDN setup - Asset optimization - Cache configuration - Global distribution 4. Monitoring setup: - Error tracking (Sentry) - Performance monitoring - User analytics - Server monitoring 5. Security measures: - API key rotation - SSL certificate setup - DDoS protection - Data encryption 6. Backup and recovery: - Database backups - Code repository backups - Recovery procedures - Disaster planning</div> <div class="prompt-verification"> <h4>✅ Verify Success:</h4> <ul> <li>Production app runs smoothly</li> <li>All APIs work correctly</li> <li>Monitoring captures data</li> </ul> </div> <button class="copy-button" onclick="copyPrompt(this)”>Copy.